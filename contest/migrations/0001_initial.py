# Generated by Django 3.1.7 on 2021-03-06 10:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('problem', '0002_auto_20210301_1138'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=192, verbose_name='标题')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('contest_type', models.CharField(choices=[(0, '测试'), (1, '作业')], default=0, max_length=30)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='开始时间')),
                ('end_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='结束时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('is_best_counts', models.BooleanField(default=False, verbose_name='是否使用最高成绩')),
                ('standings_to_student', models.BooleanField(default=True, verbose_name='是否排行榜展示给学生')),
                ('max_try', models.IntegerField(default=3, verbose_name='最大尝试次数')),
                ('access_level', models.PositiveIntegerField(choices=[(0, '仅管理员可见'), (10, '受邀请'), (20, '公开，需要报名')], default=0, verbose_name='访问控制')),
                ('managers', models.ManyToManyField(related_name='managing_contests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='ContestProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=12)),
                ('weight', models.IntegerField(default=100)),
                ('ac_user_count', models.PositiveIntegerField(default=0)),
                ('total_user_count', models.PositiveIntegerField(default=0)),
                ('ac_count', models.PositiveIntegerField(default=0)),
                ('total_count', models.PositiveIntegerField(default=0)),
                ('first_yes_time', models.DurationField(blank=True, null=True)),
                ('first_yes_by', models.PositiveIntegerField(blank=True, null=True)),
                ('max_score', models.FloatField(default=0)),
                ('avg_score', models.FloatField(default=0)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contest.contest')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problem.problem')),
            ],
            options={
                'ordering': ['identifier'],
                'unique_together': {('problem', 'contest')},
            },
        ),
        migrations.CreateModel(
            name='ContestParticipant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0)),
                ('detail_raw', models.TextField(blank=True)),
                ('is_disabled', models.BooleanField(default=False)),
                ('join_time', models.DateTimeField(blank=True, null=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contest.contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-is_confirmed', '-score'),
                'unique_together': {('user', 'contest')},
            },
        ),
        migrations.AddField(
            model_name='contest',
            name='participants',
            field=models.ManyToManyField(related_name='contests', through='contest.ContestParticipant', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contest',
            name='problems',
            field=models.ManyToManyField(through='contest.ContestProblem', to='problem.Problem'),
        ),
    ]
